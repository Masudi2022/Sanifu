version: '3.9'

services:
  db:
    image: postgres:15
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    env_file:
      - .env

  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: django-backend
    ports:
      - "8000:8000"
    volumes:
      - ./Backend:/app
      - static_volume:/app/staticfiles
    working_dir: /app
    depends_on:
      - db
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DEBUG: ${DEBUG}
      DJANGO_LOGLEVEL: ${DJANGO_LOGLEVEL}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      DATABASE_ENGINE: ${DATABASE_ENGINE}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      DJANGO_CORS_ALLOWED: ${DJANGO_CORS_ALLOWED}
    env_file:
      - .env
    command: gunicorn --chdir MyJourney --bind 0.0.0.0:8000 MyJourney.wsgi:application

  frontend:
    build:
      context: ./Frontend/journey
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ./Frontend/journey:/app
    working_dir: /app
    environment:
      - HOST=0.0.0.0
    stdin_open: true
    tty: true
    depends_on:
      - backend
    command: npm run dev

volumes:
  postgres_data:
  static_volume:
